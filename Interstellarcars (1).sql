CREATE OR REPLACE PACKAGE klant_pkg AS
  PROCEDURE voeg_klant_toe (
    v_voornaam IN Klanten.voornaam%TYPE,
    v_achternaam IN Klanten.achternaam%TYPE,
    v_adres IN Klanten.adres%TYPE,
    v_telefoonnummer IN Klanten.telefoonnummer%TYPE,
    v_email IN Klanten.email%TYPE
  );
  
  PROCEDURE update_klant (
    v_klant_id IN Klanten.klant_id%TYPE,
    v_voornaam IN Klanten.voornaam%TYPE,
    v_achternaam IN Klanten.achternaam%TYPE,
    v_adres IN Klanten.adres%TYPE,
    v_telefoonnummer IN Klanten.telefoonnummer%TYPE,
    v_email IN Klanten.email%TYPE
  );
  
  PROCEDURE verwijder_klant (v_klant_id IN Klanten.klant_id%TYPE);
END klant_pkg;
/

CREATE OR REPLACE PACKAGE BODY klant_pkg AS
  PROCEDURE voeg_klant_toe (
    v_voornaam IN Klanten.voornaam%TYPE,
    v_achternaam IN Klanten.achternaam%TYPE,
    v_adres IN Klanten.adres%TYPE,
    v_telefoonnummer IN Klanten.telefoonnummer%TYPE,
    v_email IN Klanten.email%TYPE
  ) AS
    v_klant_id Klanten.klant_id%TYPE;
  BEGIN
    SELECT klant_id_seq.NEXTVAL INTO v_klant_id FROM dual;
    
    INSERT INTO Klanten (klant_id, voornaam, achternaam, adres, telefoonnummer, email)
    VALUES (v_klant_id, v_voornaam, v_achternaam, v_adres, v_telefoonnummer, v_email);
    
    COMMIT;
  END voeg_klant_toe;
  
  PROCEDURE update_klant (
    v_klant_id IN Klanten.klant_id%TYPE,
    v_voornaam IN Klanten.voornaam%TYPE,
    v_achternaam IN Klanten.achternaam%TYPE,
    v_adres IN Klanten.adres%TYPE,
    v_telefoonnummer IN Klanten.telefoonnummer%TYPE,
    v_email IN Klanten.email%TYPE
  ) AS
  BEGIN
    UPDATE Klanten
    SET voornaam = v_voornaam,
        achternaam = v_achternaam,
        adres = v_adres,
        telefoonnummer = v_telefoonnummer,
        email = v_email
    WHERE klant_id = v_klant_id;
    
    COMMIT;
  END update_klant;
  
  PROCEDURE verwijder_klant (v_klant_id IN Klanten.klant_id%TYPE) AS
  BEGIN
    DELETE FROM Klanten WHERE klant_id = v_klant_id;
    
    COMMIT;
  END verwijder_klant;
END klant_pkg;
/

CREATE TABLE Klanten (
  klant_id NUMBER generated by default on null as identity not null
  , voornaam VARCHAR2(50) NOT NULL
  , achternaam VARCHAR2(50) NOT NULL
  , adres VARCHAR2(100) NOT NULL
  , telefoonnummer VARCHAR2(15) NOT NULL
  , email VARCHAR2(50) NOT NULL
  , PRIMARY KEY(klant_id)
);

CREATE SEQUENCE klant_id_seq
  START WITH 100
  INCREMENT BY 1
  MAXVALUE 999999999
  NOCACHE
  NOCYCLE;
  
INSERT INTO Klanten(voornaam, achternaam, adres, telefoonnummer, email)
VALUES ('Femke', 'Jansen', 'Kerkstraat 12', '0612345678', 'femkejansen@gmail.com');

INSERT INTO Klanten(voornaam, achternaam, adres, telefoonnummer, email)
VALUES ('Sven', 'de Vries', 'Hoofdstraat 45', '0623456789', 'svendevries@hotmail.com');

INSERT INTO Klanten(voornaam, achternaam, adres, telefoonnummer, email)
VALUES ('Daan', 'van der Meer', 'Marktplein 3', '0634567890', 'daanvdmeer@yahoo.com');

INSERT INTO Klanten(voornaam, achternaam, adres, telefoonnummer, email)
VALUES ('Sophie', 'Verhoeven', 'Dorpsstraat 9', '0645678901', 'sophieverhoeven@gmail.com');

INSERT INTO Klanten(voornaam, achternaam, adres, telefoonnummer, email)
VALUES ('Luuk', 'Hendriks', 'Beukenlaan 21', '0656789012', 'luukhendriks@outlook.com');

--update statement van klanten dmv packages en procedures
/
BEGIN
  klant_pkg.update_klant(5, 'Luuk', 'Hendriks', 'Bamboestraat 23', '0656789012', 'luukhendriks@outlook.com');
END;
commit;
/
--delete statement van klaten dmv packages en procedures
BEGIN
  klant_pkg.verwijder_klant(2);
END;
commit;
/
--insert statement
BEGIN
  klant_pkg.voeg_klant_toe('John', 'Doe', 'Main Street 123', '0612345678', 'johndoe@gmail.com');
END;

/

CREATE TABLE Medewerkers (
  medewerker_id NUMBER generated by default on null as identity not null
  , voornaam VARCHAR2(50) NOT NULL
  , achternaam VARCHAR2 (50) NOT NULL
  , functie VARCHAR2(50) NOT NULL
  , telefoonnummer VARCHAR2(15) NOT NULL
  , email VARCHAR2(50) NOT NULL
  , PRIMARY KEY (medewerker_id)
);

INSERT INTO Medewerkers (voornaam, achternaam, functie, telefoonnummer, email)
VALUES ('Jasper', 'van Dijk', 'Administratief medewerker', '0612345678', 'jaspervandijk@bedrijf.nl');

INSERT INTO Medewerkers (voornaam, achternaam, functie, telefoonnummer, email)
VALUES ('Tom', 'Dekker', 'Verkoopmedewerker', '0623456789', 'tomdekker@bedrijf.nl');

INSERT INTO Medewerkers (voornaam, achternaam, functie, telefoonnummer, email)
VALUES ('Sanne', 'Mulder', 'Marketing medewerker', '0634567890', 'sannemulder@bedrijf.nl');

INSERT INTO Medewerkers (voornaam, achternaam, functie, telefoonnummer, email)
VALUES ('Femke', 'de Jong', 'IT specialist', '0645678901', 'femkedejong@bedrijf.nl');

INSERT INTO Medewerkers (voornaam, achternaam, functie, telefoonnummer, email)
VALUES ('Daan', 'Bakker', 'Projectleider', '0656789012', 'daanbakker@bedrijf.nl');

CREATE TABLE Auto_Modellen (
  model_id NUMBER generated by default on null as identity not null
  , merk VARCHAR2(50) NOT NULL
  , model VARCHAR2(50) NOT NULL
  , jaar_van_uitgave NUMBER(4) NOT NULL
  , PRIMARY KEY (model_id)
);

INSERT INTO Auto_Modellen (merk, model, jaar_van_uitgave)
VALUES ('Toyota', 'Corolla', 2015);

INSERT INTO Auto_Modellen (merk, model, jaar_van_uitgave)
VALUES ('Volkswagen', 'Golf', 2018);

INSERT INTO Auto_Modellen (merk, model, jaar_van_uitgave)
VALUES ('Ford', 'Focus', 2017);

INSERT INTO Auto_Modellen (merk, model, jaar_van_uitgave)
VALUES ('Renault', 'Clio', 2019);

INSERT INTO Auto_Modellen (merk, model, jaar_van_uitgave)
VALUES ('BMW', '3 Serie', 2020);

CREATE TABLE Autos (
  auto_id NUMBER generated by default on null as identity not null
  , auto_naam VARCHAR2(100) NOT NULL
  , model_id NUMBER NOT NULL
  , kleur VARCHAR2(20) NOT NULL
  , bouwjaar NUMBER(4) NOT NULL
  , verkoopprijs NUMBER(10,2) NOT NULL
  , status VARCHAR2(20) NOT NULL
  , beschikbaarheid NUMBER (20) NOT NULL
  , PRIMARY KEY (auto_id)
);

ALTER TABLE Autos ADD CONSTRAINT fk_autos_model FOREIGN KEY (model_id) REFERENCES Auto_Modellen(model_id);

INSERT INTO Autos (auto_naam, model_id, kleur, bouwjaar, verkoopprijs, status, beschikbaarheid)
VALUES ('Toyota Corolla 2015', 1, 'Zwart', 2015, 12999.99, 'Beschikbaar', 1);

INSERT INTO Autos (auto_naam, model_id, kleur, bouwjaar, verkoopprijs, status, beschikbaarheid)
VALUES ('Volkswagen Golf 2018', 2, 'Wit', 2018, 15999.99, 'Beschikbaar', 1);

INSERT INTO Autos (auto_naam, model_id, kleur, bouwjaar, verkoopprijs, status, beschikbaarheid)
VALUES ('Ford Focus 2017', 3, 'Blauw', 2017, 13999.99, 'Beschikbaar', 1);

INSERT INTO Autos (auto_naam, model_id, kleur, bouwjaar, verkoopprijs, status, beschikbaarheid)
VALUES ('Renault Clio 2019', 4, 'Rood', 2019, 14999.99, 'Beschikbaar', 1);

INSERT INTO Autos (auto_naam, model_id, kleur, bouwjaar, verkoopprijs, status, beschikbaarheid)
VALUES ('BMW 3 Serie 2020', 5, 'Zilver', 2020, 30999.99, 'Beschikbaar', 1);

INSERT INTO Autos (auto_naam, model_id, kleur, bouwjaar, verkoopprijs, status, beschikbaarheid)
VALUES ('Toyota Corolla 2015', 1, 'Rood', 2015, 11999.99, 'Verkocht', 0);

INSERT INTO Autos (auto_naam, model_id, kleur, bouwjaar, verkoopprijs, status, beschikbaarheid)
VALUES ('Volkswagen Golf 2018', 2, 'Blauw', 2018, 14999.99, 'Beschikbaar', 1);

INSERT INTO Autos (auto_naam, model_id, kleur, bouwjaar, verkoopprijs, status, beschikbaarheid)
VALUES ('Ford Focus 2017', 3, 'Grijs', 2017, 12999.99, 'Beschikbaar', 1);

INSERT INTO Autos (auto_naam, model_id, kleur, bouwjaar, verkoopprijs, status, beschikbaarheid)
VALUES ('Renault Clio 2019', 4, 'Wit', 2019, 13999.99, 'Beschikbaar', 1);

INSERT INTO Autos (auto_naam, model_id, kleur, bouwjaar, verkoopprijs, status, beschikbaarheid)
VALUES ('BMW 3 Serie 2020', 5, 'Zwart', 2020, 29999.99, 'Verkocht', 0);


CREATE TABLE Verkopen (
  verkoop_id NUMBER generated by default on null as identity not null
  , klant_id NUMBER NOT NULL
  , medewerker_id NUMBER NOT NULL
  , auto_id NUMBER NOT NULL
  , verkoopprijs NUMBER(10,2) NOT NULL
  , verkoopdatum DATE NOT NULL
  , PRIMARY KEY (verkoop_id)
);

CREATE VIEW VerkopenDetails AS
SELECT v.verkoopdatum, k.voornaam || ' ' || k.achternaam AS klantnaam, m.voornaam || ' ' || m.achternaam AS medewerkernaam, a.auto_naam AS autonaam, v.verkoopprijs
FROM Verkopen v
JOIN Medewerkers m ON v.medewerker_id = m.medewerker_id
JOIN Klanten k ON v.klant_id = k.klant_id
JOIN Autos a ON v.auto_id = a.auto_id;

select * from verkopendetails;

INSERT INTO Verkopen (klant_id, medewerker_id, auto_id, verkoopprijs, verkoopdatum)
VALUES (1, 5, 2, 15999.99, '15-MAR-2022');

INSERT INTO Verkopen (klant_id, medewerker_id, auto_id, verkoopprijs, verkoopdatum)
VALUES (2, 4, 6, 11999.99, '20-DEC-2021');

INSERT INTO Verkopen (klant_id, medewerker_id, auto_id, verkoopprijs, verkoopdatum)
VALUES (3, 3, 3, 13999.99, '20-JAN-2020');

INSERT INTO Verkopen (klant_id, medewerker_id, auto_id, verkoopprijs, verkoopdatum)
VALUES (4, 2, 1, 12999.99, '11-OCT-2020');

INSERT INTO Verkopen (klant_id, medewerker_id, auto_id, verkoopprijs, verkoopdatum)
VALUES (5, 1, 5, 29999.99, '21-FEB-2019');

ALTER TABLE Verkopen ADD CONSTRAINT fk_verkopen_klant FOREIGN KEY (klant_id) REFERENCES Klanten (klant_id) ON DELETE CASCADE;

ALTER TABLE Verkopen ADD CONSTRAINT fk_verkopen_medewerker FOREIGN KEY (medewerker_id) REFERENCES Medewerkers (medewerker_id);

ALTER TABLE Verkopen ADD CONSTRAINT fk_verkopen_auto FOREIGN KEY (auto_id) REFERENCES Autos (auto_id);

CREATE TABLE Suppliers (
  supplier_id NUMBER generated by default on null as identity not null
  , voornaam VARCHAR2(50) NOT NULL
  , achternaam VARCHAR2(50) NOT NULL
  , adres VARCHAR2(100) NOT NULL
  , telefoonnummer VARCHAR2(15) NOT NULL
  , email VARCHAR2(50) NOT NULL
  , PRIMARY KEY (supplier_id)
);

INSERT INTO Suppliers (voornaam, achternaam, adres, telefoonnummer, email)
VALUES ('Aagje', 'Schimmel', 'Kerkstraat 1', '0612345678', 'aagje.schimmel@leverancier.nl');

INSERT INTO Suppliers (voornaam, achternaam, adres, telefoonnummer, email)
VALUES ('Bartel', 'Lobbes', 'Dorpsstraat 12', '0612345679', 'bartel.lobbes@leverancier.nl');

INSERT INTO Suppliers (voornaam, achternaam, adres, telefoonnummer, email)
VALUES ('Gerda', 'Blij', 'Havenstraat 33', '0612345680', 'gerda.blij@leverancier.nl');

INSERT INTO Suppliers (voornaam, achternaam, adres, telefoonnummer, email)
VALUES ('Jozefien', 'Kraai', 'Kerkplein 5', '0612345681', 'jozefien.kraai@leverancier.nl');

INSERT INTO Suppliers (voornaam, achternaam, adres, telefoonnummer, email)
VALUES ('Matthijs', 'Sloot', 'Molenweg 7', '0612345682', 'matthijs.sloot@leverancier.nl');

CREATE TABLE Suppliers_Autos (
  auto_id NUMBER NOT NULL
  , supplier_id NUMBER NOT NULL
  , inkoopprijs NUMBER(10,2) NOT NULL
  , inkoopdatum DATE NOT NULL
  , beschikbaarheid number NOT NULL
  , PRIMARY KEY (auto_id, supplier_id)
);


INSERT INTO Suppliers_Autos (auto_id, supplier_id, inkoopprijs, inkoopdatum, beschikbaarheid)
VALUES (1, 3, 10999.99, '15-MEI-2022', 1);

INSERT INTO Suppliers_Autos (auto_id, supplier_id, inkoopprijs, inkoopdatum, beschikbaarheid)
VALUES (2, 5, 12999.99, '14-JUL-2022', 1);

INSERT INTO Suppliers_Autos (auto_id, supplier_id, inkoopprijs, inkoopdatum, beschikbaarheid)
VALUES (3, 1, 10999.99, '18-AUG-2022', 1);

INSERT INTO Suppliers_Autos (auto_id, supplier_id, inkoopprijs, inkoopdatum, beschikbaarheid)
VALUES (4, 2, 11999.99, '25-DEC-2022', 1);

INSERT INTO Suppliers_Autos (auto_id, supplier_id, inkoopprijs, inkoopdatum, beschikbaarheid)
VALUES (5, 4, 24999.99, '28-JAN-2022', 1);

INSERT INTO Suppliers_Autos (auto_id, supplier_id, inkoopprijs, inkoopdatum, beschikbaarheid)
VALUES (6, 1, 9999.99, '23-NOV-2022', 1);

INSERT INTO Suppliers_Autos (auto_id, supplier_id, inkoopprijs, inkoopdatum, beschikbaarheid)
VALUES (7, 3, 11999.99, '06-OCT-2022', 1);

INSERT INTO Suppliers_Autos (auto_id, supplier_id, inkoopprijs, inkoopdatum, beschikbaarheid)
VALUES (8, 2, 9999.99, '02-JAN-2022', 1);

INSERT INTO Suppliers_Autos (auto_id, supplier_id, inkoopprijs, inkoopdatum, beschikbaarheid)
VALUES (9, 4, 10999.99, '15-FEB-2022', 1);

INSERT INTO Suppliers_Autos (auto_id, supplier_id, inkoopprijs, inkoopdatum, beschikbaarheid)
VALUES (10, 5, 21999.99, '22-FEB-2022', 1);

ALTER TABLE Suppliers_Autos ADD CONSTRAINT fk_suppliers_autos_auto FOREIGN KEY (auto_id) REFERENCES Autos (auto_id);

ALTER TABLE Suppliers_Autos ADD CONSTRAINT fk_suppliers_autos_supplier FOREIGN KEY (supplier_id) REFERENCES Suppliers (supplier_id);


CREATE TABLE Facturen (
  factuur_id NUMBER generated by default on null as identity not null
  , klant_id NUMBER NOT NULL
  , medewerker_id NUMBER NOT NULL
  , factuurdatum DATE NOT NULL
  , Bedrag NUMBER(10,2) NOT NULL
  , Betaald NUMBER (10,2) NOT NULL
  , betaalstatus VARCHAR2(20) NOT NULL
  , PRIMARY KEY (factuur_id)
);

INSERT INTO Facturen (klant_id, medewerker_id, factuurdatum, Bedrag, Betaald, betaalstatus)
VALUES (1, 5, '28-JUN-2021', 15999.99, 0, 'Niet betaald');

INSERT INTO Facturen (klant_id, medewerker_id, factuurdatum, Bedrag, Betaald, betaalstatus)
VALUES (2, 4, '11-JUL-2022', 11999.99, 11999.99, 'Betaald');

INSERT INTO Facturen (klant_id, medewerker_id, factuurdatum, Bedrag, Betaald, betaalstatus)
VALUES (3, 3, '17-DEC-2021', 13999.99, 0, 'Niet betaald');

INSERT INTO Facturen (klant_id, medewerker_id, factuurdatum, Bedrag, Betaald, betaalstatus)
VALUES (4, 2, '18-FEB-2021', 12999.99, 12999.99, 'Betaald');

INSERT INTO Facturen ( klant_id, medewerker_id, factuurdatum, Bedrag, Betaald, betaalstatus)
VALUES (5, 1, '02-JAN-2022', 30999.99, 30999.99, 'Betaald');


ALTER TABLE Facturen ADD CONSTRAINT fk_facturen_klant FOREIGN KEY (klant_id) REFERENCES Klanten (klant_id) ON DELETE CASCADE;

ALTER TABLE Facturen ADD CONSTRAINT fk_facturen_medewerker FOREIGN KEY (medewerker_id) REFERENCES Medewerkers (medewerker_id);


create or replace package aut_authentication
is
/*
  This package contains functions and procedures relating to managing user authentication
*/
  function is_login_valid 
    ( p_username  in aut_users.usr_username%type
    , p_password  in aut_users.usr_password%type  
    )
  return boolean;


end aut_authentication;
/

create or replace package body aut_authentication
is
/*
  This package contains functions and procedures relating to managing user authentication
*/
  -- validate user credentials
  function is_login_valid 
    ( p_username  in aut_users.usr_username%type
    , p_password  in aut_users.usr_password%type  
    )
  return boolean
  is
    cursor c_usr(b_username in aut_users.usr_username%type)
      is
        select  *
        from    aut_users usr
        where   usr.usr_username = b_username
        
        ;
    
    lr_user         c_usr%rowtype;
    ln_hash_method  pls_integer;
    lb_usr_found    boolean := false;
    lb_login_valid  boolean := false;
  begin
    -- get user credentials
    open  c_usr(b_username => p_username);
    fetch c_usr into lr_user;
    lb_usr_found := c_usr%found;
    close c_usr;

    if lb_usr_found
    then
      lb_login_valid := lr_user.usr_password = p_password;
    end if;

    return lb_login_valid;
  end is_login_valid;


  -- function validate_login
  --   ( p_username  in ran_users.usr_username%type
  --   , p_password  in ran_users.usr_password%type  
  --   )
  -- return boolean;
  
end aut_authentication;
/

PROMPT -- aut_users
create table aut_users( 
    usr_id            number        generated by default on null as identity    not null
  , usr_username      varchar2(50)                                              not null
  , usr_password      varchar2(256)
  , usr_email         varchar2(100)                              
  , usr_created_date  date          default sysdate                             not null
  , usr_created_by    varchar2(50)                                              not null
  , usr_modified_date date          default sysdate
  , usr_modified_by   varchar2(50)
  , usr_deleted       varchar2(1 char)               default 'N'                not null
  , primary key(usr_id)
);

INSERT INTO aut_users (usr_username, usr_password, usr_email, usr_created_by, usr_modified_by)
VALUES ('ABC123', 'ABC123', 'ABC@example.com', 'admin', 'admin');
commit;


alter table aut_users add 
    ( constraint aut_usr_uk1 unique (usr_username)
    , constraint aut_usr_uk2 unique (usr_email)
    );
    
PROMPT -- aut_privileges
create table aut_privileges
  ( pve_id                  number                  generated by default on null as identity not null
  , pve_name                varchar2(100)           not null
  , pve_apex_page           number
  , pve_apex_component_name varchar2(255)
  , pve_read                varchar2(1) default 'N' not null
  , pve_write               varchar2(1) default 'N' not null
  , pve_created_date        date                    not null
  , pve_created_by          varchar2(50)            not null
  , pve_modified_date       date
  , pve_modified_by         varchar2(50)   
  , primary key(pve_id)
  );

-- constraints
alter table aut_privileges add 
  ( constraint aut_pve_uk1 unique (pve_name)
  , constraint aut_pve_uk2 unique (pve_name, pve_apex_page, pve_apex_component_name)
  );
  
  
PROMPT -- aut_rle_pve
create table aut_rle_pve
  ( rpe_id            number      generated by default on null as identity not null
  , rpe_rle_id        number                      not null
  , rpe_pve_id        number                      not null
  , rpe_valid_from    date        default sysdate not null
  , rpe_valid_until   date
  , rpe_created_date  date        default sysdate not null
  , rpe_created_by    varchar2(50)                not null
  , rpe_modified_date date
  , rpe_modified_by   varchar2(50)
  , primary key(rpe_id)
  );

-- constraints
alter table aut_rle_pve add 
  ( constraint aut_rpe_rle_fk foreign key(rpe_rle_id) references aut_roles(rle_id)
  , constraint aut_rpe_pve_fk foreign key(rpe_pve_id) references aut_privileges(pve_id)
  , constraint aut_rpe_uk1 unique (rpe_rle_id, rpe_pve_id)
  );

PROMPT -- aut_roles
create table aut_roles
  ( rle_id            number        generated by default on null as identity not null
  , rle_name          varchar2(50)  not null
  , rle_description   varchar2(200)
  , rle_created_date  date          not null
  , rle_created_by    varchar2(50)  not null
  , rle_modified_date date
  , rle_modified_by   varchar2(50)  
  , primary key(rle_id)
  );

-- constraints
alter table aut_roles add 
  ( constraint aut_rle_uk1 unique (rle_name) )
;

PROMPT -- aut_usr_rle
create table aut_usr_rle
  ( ure_id            number generated by default on null as identity not null
  , ure_usr_id        number                                          not null
  , ure_rle_id        number                                          not null
  , ure_valid_from    date                            default sysdate not null
  , ure_valid_until   date
  , ure_created_date  date                            default sysdate not null
  , ure_created_by    varchar2(50)                                    not null
  , ure_modified_date date
  , ure_modified_by   varchar2(50)
  , primary key(ure_id)
  );

-- constraints 
alter table aut_usr_rle add 
  ( constraint aut_ure_usr_fk foreign key(ure_usr_id) references aut_users(usr_id)
  , constraint aut_ure_rle_fk foreign key(ure_rle_id) references aut_roles(rle_id)
  , constraint aut_ure_uk1 unique (ure_usr_id, ure_rle_id)
  );
  
create or replace package aut_authorisation
as
  -- check if user has authorization for a certain page/component
  function has_user_privilege
    ( p_username        in aut_users.usr_username%type                  default null
    , p_role            in aut_roles.rle_name%type                      default null
    , p_privilege       in aut_privileges.pve_name%type                 default null
    , p_page            in aut_privileges.pve_apex_page%type            default null
    , p_component       in aut_privileges.pve_apex_component_name%type  default null
    , p_read            in aut_privileges.pve_read%type                 default null
    , p_write           in aut_privileges.pve_write%type                default null
    , p_usr_id          in aut_users.usr_id%type                        default null
    , p_rle_id          in aut_roles.rle_id%type                        default null
    , p_pve_id          in aut_privileges.pve_id%type                   default null
    , p_component_type  in varchar2                                     default null
    )
  return boolean;
      
end aut_authorisation;
/

create or replace package body aut_authorisation
as
  -- check if user has authorization for a certain page/component
  function has_user_privilege
    ( p_username        in aut_users.usr_username%type                  default null
    , p_role            in aut_roles.rle_name%type                      default null
    , p_privilege       in aut_privileges.pve_name%type                 default null
    , p_page            in aut_privileges.pve_apex_page%type            default null
    , p_component       in aut_privileges.pve_apex_component_name%type  default null
    , p_read            in aut_privileges.pve_read%type                 default null
    , p_write           in aut_privileges.pve_write%type                default null
    , p_usr_id          in aut_users.usr_id%type                        default null
    , p_rle_id          in aut_roles.rle_id%type                        default null
    , p_pve_id          in aut_privileges.pve_id%type                   default null
    , p_component_type  in varchar2                                     default null
    )
  return boolean
  is

    -- check user privs
    cursor c_user_privs
      ( b_username        in aut_users.usr_username%type                  
      , b_role            in aut_roles.rle_name%type                      
      , b_privilege       in aut_privileges.pve_name%type                 
      , b_page            in aut_privileges.pve_apex_page%type            
      , b_component       in aut_privileges.pve_apex_component_name%type  
      , b_read            in aut_privileges.pve_read%type                 
      , b_write           in aut_privileges.pve_write%type                
      , b_usr_id          in aut_users.usr_id%type                        
      , b_rle_id          in aut_roles.rle_id%type                        
      , b_pve_id          in aut_privileges.pve_id%type                   
      )
    is
      select  *
      from    aut_user_privileges_vw usr
      where   (usr.usr_username = b_username or usr.usr_id = b_usr_id)
      and     (
                -- check if user has roles
                  coalesce(usr.usr_rle_id, 0)                     = coalesce(b_rle_id, usr.usr_rle_id, 0)
              and coalesce(usr.usr_rle_name, 'x')                 = coalesce(b_role, usr.usr_rle_name, 'x')
              and (trunc(usr_rle_valid_from)                      <= trunc(sysdate) or usr_rle_valid_from is null)
              and (trunc(usr_rle_valid_until)                     >= trunc(sysdate) or usr_rle_valid_until is null)
              -- check if user role has privs
              and coalesce(usr.usr_pve_id, 0)                     = coalesce(b_pve_id, usr.usr_pve_id, 0)
              and coalesce(usr.usr_pve_name, 'x')                 = coalesce(b_privilege, usr.usr_pve_name,'x')
              and coalesce(usr.usr_pve_apex_page, 0)              = coalesce(b_page, usr.usr_pve_apex_page, 0)
              and coalesce(usr.usr_pve_apex_component_name,'x')   = coalesce(b_component, usr.usr_pve_apex_component_name, 'x')
              and coalesce(usr.usr_pve_read,'x')                  = coalesce(b_read, usr.usr_pve_read, 'x')
              and coalesce(usr.usr_pve_write,'x')                 = coalesce(b_write, usr.usr_pve_write, 'x')
              and (trunc(usr.usr_pve_valid_from)                  <= trunc(sysdate) or usr.usr_pve_valid_from is null)
              and (trunc(usr_pve_valid_until)                     >= trunc(sysdate) or usr_pve_valid_until is null)              
            );  

    -- variables
    lr_usr_privs  c_user_privs%rowtype;
    lb_retval     boolean := false;                     
  begin
    -- Debug messages
    apex_debug.message('> aut_authorisation.has_user_privilege ');
    apex_debug.message('p_username = '||p_username);
    apex_debug.message('p_role = '||p_role);
    apex_debug.message('p_privilege = '||p_privilege);
    apex_debug.message('p_page = '||p_page);
    apex_debug.message('p_component = '||p_component);
    apex_debug.message('p_read = '||p_read);
    apex_debug.message('p_write = '||p_write);
    apex_debug.message('p_usr_id = '||p_usr_id);
    apex_debug.message('p_rle_id = '||p_rle_id);
    apex_debug.message('p_pve_id = '||p_pve_id);
    apex_debug.message('p_component_type = '||p_component_type);  

    -- check privs
    open c_user_privs(b_username    => p_username    
                    , b_role        => p_role    
                    , b_privilege   => p_privilege    
                    , b_page        => p_page    
                    , b_component   => p_component    
                    , b_read        => p_read    
                    , b_write       => p_write    
                    , b_usr_id      => p_usr_id    
                    , b_rle_id      => p_rle_id    
                    , b_pve_id      => p_pve_id    
                    );
    fetch c_user_privs
    into  lr_usr_privs;
    -- set return value
    lb_retval := c_user_privs%found;
    close c_user_privs;                    
    
    -- Debug messages
    apex_debug.message('< aut_authorisation.has_user_privilege ');
    -- return val
    return lb_retval;
  end has_user_privilege;
      
end aut_authorisation;
/

create or replace view aut_user_privileges_vw
as
  select  usr.usr_id                  usr_id              
  ,       rle.rle_id                  usr_rle_id              
  ,       pve.pve_id                  usr_pve_id              
  -- user details         
  ,       usr.usr_username            usr_username            
  ,       usr.usr_email               usr_email
  -- user role details    
  ,       rle.rle_name                usr_rle_name                
  ,       rle.rle_description         usr_rle_description                
  ,       ure.ure_valid_from          usr_rle_valid_from
  ,       ure.ure_valid_until         usr_rle_valid_until
  -- priv details
  ,       pve.pve_name                usr_pve_name              
  ,       pve.pve_apex_page           usr_pve_apex_page      
  ,       pve.pve_apex_component_name usr_pve_apex_component_name                  
  ,       pve.pve_read                usr_pve_read  
  ,       pve.pve_write               usr_pve_write  
  ,       rpe.rpe_valid_from          usr_pve_valid_from
  ,       rpe.rpe_valid_until         usr_pve_valid_until
  from    aut_users         usr
  join    aut_usr_rle       ure on usr.usr_id = ure.ure_usr_id
  join    aut_roles         rle on rle.rle_id = ure.ure_rle_id
  join    aut_rle_pve       rpe on rle.rle_id = rpe.rpe_rle_id
  join    aut_privileges    pve on pve.pve_id = rpe.rpe_pve_id
;  

create or replace trigger aut_pve_biur
  before insert or update on aut_privileges for each row
declare
  -- start custom declare
  -- end custom declare
begin
  --
  if    inserting
  then
    --
    :new.pve_created_by     := nvl( v('APP_USER'), user);
    :new.pve_created_date   := sysdate;
    --
    null;
    --
    -- start custom inserting
    -- end custom inserting
    --
  elsif updating
  then
    --
    :new.pve_modified_by    := nvl( v('APP_USER'), user);
    :new.pve_modified_date  := sysdate;
    --
    null;
    --
    -- start custom updating
    -- end custom updating
    --
  end if;
  --
  -- start custom body
  -- end custom body
  --
end aut_pve_biur;
/

create or replace trigger aut_rle_biur
  before insert or update on aut_roles for each row
declare
  -- start custom declare
  -- end custom declare
begin
  --
  if    inserting
  then
    --
    :new.rle_created_by     := nvl( v('APP_USER'), user);
    :new.rle_created_date   := sysdate;
    --
    null;
    --
    -- start custom inserting
    -- end custom inserting
    --
  elsif updating
  then
    --
    :new.rle_modified_by    := nvl( v('APP_USER'), user);
    :new.rle_modified_date  := sysdate;
    --
    null;
    --
    -- start custom updating
    -- end custom updating
    --
  end if;
  --
  -- start custom body
  -- end custom body
  --
end aut_rle_biur;
/

create or replace trigger aut_rpe_biur
  before insert or update on aut_rle_pve for each row
declare
  -- start custom declare
  -- end custom declare
begin
  --
  if    inserting
  then
    --
    :new.rpe_created_by     := nvl( v('APP_USER'), user);
    :new.rpe_created_date   := sysdate;
    --
    null;
    --
    -- start custom inserting
    -- end custom inserting
    --
  elsif updating
  then
    --
    :new.rpe_modified_by    := nvl( v('APP_USER'), user);
    :new.rpe_modified_date  := sysdate;
    --
    null;
    --
    -- start custom updating
    -- end custom updating
    --
  end if;
  --
  -- start custom body
  -- end custom body
  --
end aut_rpe_biur;
/

create or replace trigger aut_ure_biur
  before insert or update on aut_usr_rle for each row
declare
  -- start custom declare
  -- end custom declare
begin
  --
  if    inserting
  then
    --
    :new.ure_created_by     := nvl( v('APP_USER'), user);
    :new.ure_created_date   := sysdate;
    --
    null;
    --
    -- start custom inserting
    -- end custom inserting
    --
  elsif updating
  then
    --
    :new.ure_modified_by    := nvl( v('APP_USER'), user);
    :new.ure_modified_date  := sysdate;
    --
    null;
    --
    -- start custom updating
    -- end custom updating
    --
  end if;
  --
  -- start custom body
  -- end custom body
  --
end aut_ure_biur;
/

create or replace trigger aut_usr_biur
  before insert or update on aut_users for each row
declare
  -- start custom declare
  -- end custom declare
begin
  --
  if    inserting
  then
    --
    :new.usr_created_by     := nvl( v('APP_USER'), user);
    :new.usr_created_date   := sysdate;
    --
    null;
    --
    -- start custom inserting
    -- end custom inserting
    --
  elsif updating
  then
    --
    :new.usr_modified_by    := nvl( v('APP_USER'), user);
    :new.usr_modified_date  := sysdate;
    --
    null;
    --
    -- start custom updating
    -- end custom updating
    --
  end if;
  --
  -- start custom body
  -- end custom body
  --
end aut_usr_biur;
/



  